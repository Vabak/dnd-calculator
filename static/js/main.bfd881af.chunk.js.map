{"version":3,"sources":["App.js","serviceWorker.js","index.js","constants/constants.js","containers/Calc/Calc.js","components/Caret/Caret.js","components/NumberCell/NumberCell.js","components/Operator/Operator.js","components/Result/Result.js","containers/InputRow/InputRow.js"],"names":["Headline","styled","h1","_templateObject","App","react_default","a","createElement","className","Calc","Component","DragDropContext","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__webpack_require__","d","__webpack_exports__","ItemTypes","OPERATORS","NUMBERS","NumberCell","Calculator","state","rows","row-1","id","elementsOrder","result","isValid","rowIds","elementsValues","caret","positionRow","handleInputChange","event","rowId","value","target","_this","inputValidation","createMathOperator","slice","handleChangeNumber","test","includes","setState","Object","_home_vab_Desktop_Projects_dnc_calc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","_home_vab_Desktop_Projects_dnc_calc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","handleKeyDown","key","createNumber","deleteElement","createRow","newElementsOrder","_home_vab_Desktop_Projects_dnc_calc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","length","type","newElementId","Date","now","toString","newElement","valueId","bound","push","tied","operator","inputId","addCaret","index","removeCaret","validateBeforeEval","str","counter","prev","i","current","calculation","equation","map","el","eval","undefined","newRows","assign","e","swapCells","srcIndex","destIndex","srcEl","swapCellsBetweenRows","srcRow","destRow","_objectSpread8","srcElementsOrder","destElementsOrder","destEl","newValues","cloneNumber","_objectSpread10","cloneEl","newValue","newRowId","newRowIds","Array","from","this","newRow","caretpositionRow","deleted","pop","newTied","filter","_objectSpread13","unbound","unboundElementsOrder","_this2","react__WEBPACK_IMPORTED_MODULE_8___default","_InputRow_InputRow__WEBPACK_IMPORTED_MODULE_10__","setRef","setTextInputRef","caretPos","swapCellsBetween","handleInput","keyDown","calc","blinker","keyframes","StyledCaret","div","_templateObject2","Caret","props","StyledNumber","NumberCell_templateObject","isOver","isDragging","Input","input","NumberCell_templateObject2","flow","DragSource","beginDrag","sourceId","sourceRowId","sourceIndex","connect","monitor","connectDragSource","dragSource","connectDragPreview","dragPreview","DropTarget","drop","component","sourceRow","getItem","dragIndex","connectDropTarget","dropTarget","_ref","objectWithoutProperties","style","height","width","padding","margin","border-radius","autoFocus","onFocus","stopPropagation","onKeyDown","onChange","StyledOperator","span","Operator_templateObject","Operator","StyledSpan","Result_templateObject","Result","Row","InputRow_templateObject","InputRow","myRef","React","createRef","prevProps","prevState","focus","mathRow","elem","components_Operator_Operator","operatorId","_this$props","components_Caret_Caret","ref","tabIndex","onBlur","position","components_Result_Result","didDrop"],"mappings":"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","file":"static/js/main.bfd881af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport styled from 'styled-components'\nimport Calculator from './containers/Calc/Calc'\n\n\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport { DragDropContext } from 'react-dnd'\n\nconst Headline = styled.h1`\n  font-weight: normal;\n  text-transform: uppercase;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Headline>Reactive drag-n-drop calculator</Headline>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default DragDropContext(HTML5Backend)(App);\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const ItemTypes = {\n    NumberCell: 'NUMBER_CELL'\n  };\n\nexport const OPERATORS = ['/', '+', '-', '*'];\nexport const NUMBERS = /^\\d*$/;","import React, { Component } from 'react';\n\nimport { NUMBERS, OPERATORS } from '../../constants/constants'\nimport InputRow from '../InputRow/InputRow';\n\n\nclass Calculator extends Component {\n    state = {\n        rows: {\n            'row-1': {\n                id: 'row-1',\n                elementsOrder: [],\n                result: 0,\n                isValid: true,\n            },\n        },\n        rowIds: ['row-1'],\n        elementsValues: {\n        },\n        caret: {\n            positionRow: null,\n        }\n    }\n\n    handleInputChange = (event, id, rowId) => {\n        const value = event.target.value;\n        if (this.inputValidation(value) === 'number') {\n            this.handleChangeNumber(value, id, rowId)\n            return;\n        }\n        if (this.inputValidation(value) === 'operator') {\n            this.createMathOperator(value.slice(-1), id, rowId)\n            return;\n        }\n    }\n\n    inputValidation = (value) => {\n        if (NUMBERS.test(value)) return 'number';\n        if (OPERATORS.includes(value) || OPERATORS.includes(value.slice(-1))) return 'operator';\n        if (value === 'Backspace') return 'Backspace';\n        if (value === 'Enter') return 'Enter';\n        return;\n    }\n\n    handleChangeNumber = (value, id, rowId) => {\n        this.setState({\n            elementsValues: {\n                ...this.state.elementsValues,\n                [id]: {\n                    ...this.state.elementsValues[id],\n                    value: value\n                }\n            }\n        }, )\n    }\n\n    handleKeyDown = (event, rowId) => {\n        const validatedInput = this.inputValidation(event.key)\n        switch (validatedInput) {\n            case 'number':\n                this.createNumber(rowId)\n                break;\n            case 'operator':\n                this.createMathOperator(event.key, null, rowId)\n                break;\n            case 'Backspace':\n                this.deleteElement()\n                break;\n            case 'Enter':\n                this.createRow();\n                break;\n            default:\n                break;\n        }\n    }\n\n    createRow() {\n        const newRowId = 'row-' + Date.now().toString();\n        const newRowIds = Array.from(this.state.rowIds);\n        newRowIds.push(newRowId);\n        const newRow = {\n            id: newRowId,\n            elementsOrder: [],\n            result: 0,\n            isValid: true,\n        }\n        this.setState({\n            rowIds: newRowIds,\n            rows: {\n                ...this.state.rows,\n                [newRowId]: newRow,\n            }\n        });\n    }\n\n    createNumber = (rowId) => {\n        const newElementsOrder = [...this.state.rows[rowId].elementsOrder];\n        if (newElementsOrder.length !== 0 && newElementsOrder[newElementsOrder.length-1].type === 'number') return;\n        const newElementId = 'num-' + Date.now().toString();\n\n        const newElement = {\n            id: newElementId,\n            type: 'number',\n            valueId: newElementId,\n            bound: false,\n        }\n        newElementsOrder.push(newElement);\n        this.setState({\n            rows: {\n                ...this.state.rows,\n                [rowId]: {\n                    ...this.state.rows[rowId],\n                    elementsOrder: newElementsOrder,\n                }\n            },\n            elementsValues: {\n                ...this.state.elementsValues,\n                [newElementId]: {\n                    value: '',\n                    tied: [{\n                        rowId: rowId,\n                        id: newElementId\n                    }],\n                }\n            },\n        }, )\n    }\n\n    createMathOperator = (operator, inputId, rowId) => {\n        const newElementsOrder = [...this.state.rows[rowId].elementsOrder];\n        if (newElementsOrder.length === 0 || newElementsOrder[newElementsOrder.length-1].type === 'operator') return;\n        const newElementId = 'opr-' + Date.now().toString();\n        const newElement = {\n            id: newElementId,\n            type: 'operator',\n            valueId: newElementId,\n        }\n        newElementsOrder.push(newElement);\n        this.setState({\n            ...this.state,\n            rows: {\n                ...this.state.rows,\n                [rowId]: {\n                    ...this.state.rows[rowId],\n                    elementsOrder: newElementsOrder,\n                }\n            },\n            elementsValues: {\n                ...this.state.elementsValues,\n                [newElementId]: {\n                    value: operator,\n                }\n            },\n        })\n    }\n\n    addCaret = (rowId, index) => {\n        this.setState({\n            caret: {\n                positionRow: rowId,\n            }\n        })\n    }\n\n    removeCaret = (rowId) => {\n        this.setState({\n            caret: {\n                positionRow: null,\n            }\n        })\n    }\n\n    deleteElement() {\n        // Delete from ElementsOrder\n        const caretpositionRow = this.state.caret.positionRow;\n        const newElementsOrder = [...this.state.rows[caretpositionRow].elementsOrder];\n        if (newElementsOrder.length === 0) return;\n        const deleted = newElementsOrder.pop();\n\n        if (deleted.type === 'operator') {\n            const newValues = {...this.state.elementsValues}\n            delete newValues[deleted.valueId]\n            this.setState({\n                elementsValues: newValues,\n                rows: {\n                    ...this.state.rows,\n                    [caretpositionRow]: {\n                        ...this.state.caretpositionRow,\n                        elementsOrder: newElementsOrder,\n                    }\n                }\n            })\n            return;\n        }\n\n        // Delete from ElementsValues\n        const newValues = {...this.state.elementsValues}\n        const newTied = newValues[deleted.valueId].tied.filter(el => {\n           return el.id !== deleted.id\n        })\n        newValues[deleted.valueId].tied = newTied\n\n        if ( newTied.length === 0 ) { \n            delete newValues[deleted.valueId]\n        }\n\n        // Unbound single element\n        if ( newTied.length === 1 ) {\n            const unbound = newTied[0];\n            const unboundElementsOrder = [...this.state.rows[unbound.rowId].elementsOrder]\n            unboundElementsOrder.map(el => {\n                if ( el.id === unbound.id ) return el.bound = false;\n            })\n            this.setState({\n                elementsValues: newValues,\n                rows: {\n                    ...this.state.rows,\n                    [unbound.rowId]: {\n                        ...this.state.rows[unbound.rowId],\n                        elementsOrder: unboundElementsOrder,\n                    },\n\n                    [caretpositionRow]: {\n                        ...this.state.caretpositionRow,\n                        elementsOrder: newElementsOrder,\n                    }\n                }\n            })\n            return;\n        }\n\n        this.setState({\n            elementsValues: newValues,\n            rows: {\n                ...this.state.rows,\n                [caretpositionRow]: {\n                    ...this.state.caretpositionRow,\n                    elementsOrder: newElementsOrder,\n                }\n            }\n        })\n    }\n\n    validateBeforeEval = (str, rowId) => {\n        if (str.length === 0) return true;\n        const elementsOrder = this.state.rows[rowId].elementsOrder\n        let counter = 0;\n        let prev = elementsOrder[0].type\n        for (let i = 0; i <= elementsOrder.length-1 ; i++) {\n            const current = elementsOrder[i];\n            if (prev === current.type) {\n                counter++;\n            } else {\n                prev = current.type;\n                counter = 0;\n            }\n            if (counter >= 2) return false;\n        }\n        return true;\n    }\n\n    calculation = (rowId) => {\n        let equation = '';\n        this.state.rows[rowId].elementsOrder.map(el => {\n            equation = equation + this.state.elementsValues[el.valueId].value\n        })\n        try {\n            if (!this.validateBeforeEval(equation, rowId)) {\n                throw '';\n            };\n            let result = eval(equation);\n            if (result === undefined) result = 0;\n            const newRows = Object.assign({}, this.state.rows)\n            newRows[rowId].result = result;\n            newRows[rowId].isValid = true;\n            this.setState({\n                rows: newRows\n            })\n        } catch(e) {\n            const newRows = Object.assign({}, this.state.rows)\n            newRows[rowId].result = 'error';\n            newRows[rowId].isValid = false;\n            this.setState({\n                rows: newRows \n            })\n        }\n    }\n\n    swapCells = (rowId, srcIndex, destIndex) => {\n        const newElementsOrder = [...this.state.rows[rowId].elementsOrder];\n        const srcEl = Object.assign({}, newElementsOrder[srcIndex]);\n        newElementsOrder[srcIndex] = newElementsOrder[destIndex];\n        newElementsOrder[destIndex] = srcEl;\n        this.setState({\n            ...this.state,\n            rows: {\n                ...this.state.rows,\n                [rowId]: {\n                    ...this.state.rows[rowId],\n                    elementsOrder: newElementsOrder,\n                }\n            },\n        }, )\n    }\n\n    swapCellsBetweenRows = (srcRow, destRow, srcIndex, destIndex) => {\n        const srcElementsOrder = [...this.state.rows[srcRow].elementsOrder];\n        const destElementsOrder = [...this.state.rows[destRow].elementsOrder];\n        const srcEl = Object.assign({}, srcElementsOrder[srcIndex]);\n        const destEl = Object.assign({}, destElementsOrder[destIndex]);\n        srcElementsOrder[srcIndex] = destEl;\n        destElementsOrder[destIndex] = srcEl;\n        \n        const newValues = Object.assign({},this.state.elementsValues);\n        newValues[srcEl.valueId].tied.map(el => {\n            if ( el.id === srcEl.id ) {\n                return el.rowId = destRow;\n            }\n        })\n        newValues[destEl.valueId].tied.map(el => {\n            if ( el.id === destEl.id ) {\n                return el.rowId = srcRow;\n            }\n        })\n\n        this.setState({\n            elementsValues: newValues,\n            rows: {\n                ...this.state.rows,\n                [srcRow]: {\n                    ...this.state.rows[srcRow],\n                    elementsOrder: srcElementsOrder,\n                },\n                [destRow]: {\n                    ...this.state.rows[destRow],\n                    elementsOrder: destElementsOrder,\n                }\n            },\n        })\n    }\n\n    cloneNumber = (srcRow, destRow, srcIndex) => {\n        const srcElementsOrder = [...this.state.rows[srcRow].elementsOrder];\n        const destElementsOrder = [...this.state.rows[destRow].elementsOrder];\n        const srcEl = srcElementsOrder[srcIndex];\n        const newElementId = 'num-' + Date.now().toString();\n        const cloneEl = {\n            id: newElementId,\n            type: 'number',\n            valueId: srcEl.valueId,\n            bound: true,\n        };\n        destElementsOrder.push(cloneEl);\n        const newValue = Object.assign({}, this.state.elementsValues[srcEl.valueId]); \n        newValue.tied.push({\n            rowId: destRow,\n            id: newElementId,\n        })\n        if (!srcEl.bound) srcEl.bound = true;\n        this.setState({\n            ...this.state,\n            elementsValues: {\n                ...this.state.elementsValues,\n                [srcEl.valueId]: newValue\n            },\n            rows: {\n                ...this.state.rows,\n                [srcRow]: {\n                    ...this.state.rows[srcRow],\n                    elementsOrder: srcElementsOrder,\n                },\n                [destRow]: {\n                    ...this.state.rows[destRow],\n                    elementsOrder: destElementsOrder,\n                }\n            },\n        }, )\n    }\n\n    render() { \n        const rows = this.state.rowIds.map(rowId => (\n            <InputRow\n                setRef={this.setTextInputRef}\n                caretPos={this.state.caret.positionRow}\n                addCaret={this.addCaret}\n                removeCaret={this.removeCaret}\n                key={rowId}\n                swapCells={this.swapCells}\n                swapCellsBetween={this.swapCellsBetweenRows}\n                cloneNumber={this.cloneNumber}\n                handleInput={this.handleInputChange}\n                keyDown={this.handleKeyDown}\n                rowId={rowId}\n                calc={this.calculation}\n                elementsValues={this.state.elementsValues}\n                result={this.state.rows[rowId].result}\n                isValid={this.state.rows[rowId].isValid}\n                elementsOrder={this.state.rows[rowId].elementsOrder}\n            />\n        ))\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport default Calculator;","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst blinker = keyframes`\n  50% {\n    opacity: 0;\n  }\n`\n\nconst StyledCaret = styled.div`\n  background-color: blue;\n  position: absolute;\n  left: 0;\n  opacity: 0.5;\n  height: 100%;\n  width: 3px;\n  overflow: hidden;\n  text-decoration: blink;\n  animation: ${blinker} 1s linear infinite;\n`;\n\nconst Caret = (props) => {\n    return (\n        <StyledCaret />\n    );\n}\n\nexport default Caret;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { ItemTypes } from '../../constants/constants'\nimport flow from 'lodash.flow'\n\nconst StyledNumber = styled.div`\n    height: 40px;\n    padding: 10px;\n    padding-top: 13px;\n    border-radius: 20%;\n    background-color: ${props => props.isOver ? 'lightgreen' : props.bound ? 'orange' : 'lightblue'};\n    opacity: ${props => props.isDragging ? 0 : 1};\n    display: inline-block;\n`;\n\nconst Input = styled.input`\n    width: 100%;\n    height: 80%;\n    font-size: 1.3em;\n    background-color: lightgray;\n    border: none;  \n`;\n\nconst cellSource = {\n    beginDrag(props) {\n        return {\n            sourceId: props.id,\n            sourceRowId: props.rowId,\n            sourceIndex: props.index,\n        };\n    },\n};\n\nconst cellTarget = {\n\tdrop(props, monitor, component) {\n\t\tif (!component) {\n\t\t\treturn null;\n        }\n        const destRow = props.rowId;\n        const sourceRow = monitor.getItem().sourceRowId;\n        const dragIndex = monitor.getItem().sourceIndex;\n        if (sourceRow === destRow) {\n            props.swapCells(destRow, dragIndex, props.index)\n            return;\n        } \n        props.swapCellsBetween(sourceRow, destRow, dragIndex, props.index)\n\t},\n}\n\n\nconst sourceCollect = (connect, monitor) => {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging(),\n    }\n}\n\nconst dropCollect = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver()\n    }\n}\n\nconst Cell = ({connectDragSource, connectDragPreview, connectDropTarget, isDragging, bound, isOver, ...props}) => {\n    return connectDragSource(connectDropTarget(\n        <div style={{height: '60px', width: '60px', padding: 0, margin: '0 10px', 'border-radius': '20%'}}>\n            <StyledNumber\n                isOver={isOver}\n                isDragging={isDragging}\n                bound={bound}>\n                    <Input\n                        autoFocus\n                        onFocus={(e) => {e.stopPropagation()}}\n                        value={props.value}\n                        rowId={props.rowId}\n                        onKeyDown={e => e.stopPropagation()}\n                        onChange={(event) => { props.handleInput(event, props.valueId, props.rowId) }}\n                    />\n            </StyledNumber>\n        </div>\n    )\n               \n    );\n}\n\nexport default flow(DragSource(ItemTypes.NumberCell, cellSource, sourceCollect), DropTarget(ItemTypes.NumberCell, cellTarget, dropCollect))(Cell);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledOperator = styled.span`\n    height: 40px;\n    padding: 10px;\n    margin: 0 10px;\n    text-align: center; \n    font-size: 1.5em;\n`;\n\nconst Operator = (props) => {\n    return (\n        <StyledOperator>{props.operator}</StyledOperator>\n    );\n}\n \nexport default Operator;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSpan = styled.span`\n    width: auto;\n    font-size: 1.3em;\n    line-height: 40px;\n    padding: 10px;\n    border-radius: 20%;\n    text-align: center;\n    vertical-align: center;\n    background-color: ${props => props.isValid ? 'lightgreen' : 'red'};\n    display: inline-block;\n    margin: 0 10px;\n`;\n\nconst Result = (props) => {\n    return ( \n        <StyledSpan isValid={props.isValid} >\n            {props.result}\n        </StyledSpan>\n    )\n}\n \nexport default Result;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { DropTarget } from 'react-dnd'\nimport Caret from '../../components/Caret/Caret';\nimport NumberCell from '../../components/NumberCell/NumberCell';\nimport Operator from '../../components/Operator/Operator';\nimport { ItemTypes } from '../../constants/constants'\nimport Result from '../../components/Result/Result';\n\nconst Row = styled.div`\n    width: 100%;\n    background-color: ${props => props.isOver ? 'darkgrey' : '#f1f1f1'};\n    padding: 20px;\n    display: flex;\n    flex-direction: row;\n    margin-top: 10px;\n`;\n\nconst rowCollect = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver()\n    }\n}\n\nconst rowTarget = {\n    drop(props, monitor) {\n        const destRow = props.rowId;\n        const sourceRow = monitor.getItem().sourceRowId;\n        if (destRow === sourceRow) return;\n        if (monitor.didDrop()) return;\n        const dragIndex = monitor.getItem().sourceIndex;\n        \n        props.cloneNumber(sourceRow, destRow, dragIndex);\n\t},\n}\n\n\nclass InputRow extends Component {\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.elementsOrder !== this.props.elementsOrder ||\n            prevProps.elementsValues !== this.props.elementsValues)\n            this.props.calc(this.props.rowId)\n    }\n    myRef = React.createRef();\n\n    componentDidMount() {\n        this.myRef.current.focus()\n    }\n    \n    render() { \n        let mathRow = this.props.elementsOrder.map((elem, index) => {\n            switch (elem.type) {\n                case 'number':\n                    return <NumberCell\n                        handleInput={this.props.handleInput}\n                        inputId={elem.id}\n                        index={index}\n                        bound={elem.bound}\n                        key={elem.id}\n                        swapCells={this.props.swapCells}\n                        swapCellsBetween={this.props.swapCellsBetween}\n                        rowId={this.props.rowId}\n                        addCaret={this.props.addCaret}\n                        valueId={elem.valueId}\n                        value={this.props.elementsValues[elem.valueId].value} />\n                case 'operator':\n                    return <Operator\n                        index={index}\n                        operatorId={elem.id}\n                        key={elem.id}\n                        addCaret={this.props.addCaret}\n                        operator={this.props.elementsValues[elem.valueId].value} />\n                default:\n                    return null;\n            }\n        });\n        const {connectDropTarget, isOver} = this.props\n        const caret = this.props.caretPos === this.props.rowId ? <Caret /> : null; \n        return connectDropTarget(\n            <div>\n                <Row    \n                    ref={this.myRef}\n                    isOver={isOver}\n                    tabIndex=\"0\"\n                    onFocus={(ref) => this.props.addCaret(this.props.rowId)}\n                    onBlur={() => this.props.removeCaret(this.props.rowId)}\n                    onKeyDown={(event, id) => this.props.keyDown(event, this.props.rowId)}\n                    rowId={this.props.rowId}>\n                    {mathRow}\n                    <div style={{position: 'relative'}}>\n                        {caret}\n                        <Operator operator={'='} />\n                        <Result \n                            isValid={this.props.isValid}\n                            result={this.props.result}\n                        />\n                    </div>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default DropTarget(ItemTypes.NumberCell, rowTarget, rowCollect)(InputRow);"],"sourceRoot":""}