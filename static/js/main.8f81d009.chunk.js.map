{"version":3,"sources":["App.js","serviceWorker.js","index.js","constants/constants.js","containers/Calc/Calc.js","components/Caret/Caret.js","components/NumberCell/NumberCell.js","components/Operator/Operator.js","components/Result/Result.js","containers/InputRow/InputRow.js"],"names":["Headline","styled","h1","_templateObject","App","react_default","a","createElement","className","Calc","Component","DragDropContext","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__webpack_require__","d","__webpack_exports__","ItemTypes","OPERATORS","NUMBERS","NumberCell","Calculator","state","rows","row-1","id","elementsOrder","result","isValid","rowIds","elementsValues","caret","positionRow","handleInputChange","event","rowId","ctx","Object","_home_vab_Desktop_Projects_dnc_calc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_9__","_this","value","target","inputValidation","_ref","_home_vab_Desktop_Projects_dnc_calc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__","_home_vab_Desktop_Projects_dnc_calc_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default","mark","_callee","context","wrap","_context","prev","next","createMathOperator","slice","createNumber","stop","this","_x","apply","arguments","sequence","handleChangeNumber","test","includes","setState","_home_vab_Desktop_Projects_dnc_calc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","_home_vab_Desktop_Projects_dnc_calc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","handleKeyDown","key","deleteElement","createRow","newElementsOrder","_home_vab_Desktop_Projects_dnc_calc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","length","type","newElementId","Date","now","toString","newElement","valueId","bound","push","tied","operator","inputId","addCaret","index","removeCaret","validateBeforeEval","str","counter","i","current","calculation","equation","map","el","eval","undefined","newRows","assign","e","swapCells","srcIndex","destIndex","srcEl","swapCellsBetweenRows","srcRow","destRow","_objectSpread8","srcElementsOrder","destElementsOrder","destEl","newValues","cloneNumber","_objectSpread10","cloneEl","newValue","newRowId","newRowIds","Array","from","newRow","caretpositionRow","deleted","pop","newTied","filter","_objectSpread13","unbound","unboundElementsOrder","_this2","react__WEBPACK_IMPORTED_MODULE_11___default","_InputRow_InputRow__WEBPACK_IMPORTED_MODULE_13__","setRef","setTextInputRef","caretPos","swapCellsBetween","handleInput","keyDown","calc","blinker","keyframes","StyledCaret","div","_templateObject2","Caret","props","StyledNumber","NumberCell_templateObject","isOver","isDragging","Input","input","NumberCell_templateObject2","flow","DragSource","beginDrag","sourceId","sourceRowId","sourceIndex","connect","monitor","connectDragSource","dragSource","connectDragPreview","dragPreview","DropTarget","drop","component","sourceRow","getItem","dragIndex","connectDropTarget","dropTarget","objectWithoutProperties","style","height","width","padding","margin","borderRadius","autoFocus","onFocus","stopPropagation","onKeyDown","onChange","StyledOperator","span","Operator_templateObject","Operator","StyledSpan","Result_templateObject","Result","Row","InputRow_templateObject","InputRow","myRef","React","createRef","prevProps","prevState","focus","mathRow","elem","components_Operator_Operator","operatorId","_this$props","components_Caret_Caret","ref","tabIndex","onBlur","position","components_Result_Result","didDrop"],"mappings":"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","file":"static/js/main.8f81d009.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport styled from 'styled-components'\nimport Calculator from './containers/Calc/Calc'\n\n\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport { DragDropContext } from 'react-dnd'\n\nconst Headline = styled.h1`\n  font-weight: normal;\n  text-transform: uppercase;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Headline>Reactive drag-n-drop calculator</Headline>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default DragDropContext(HTML5Backend)(App);\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const ItemTypes = {\n    NumberCell: 'NUMBER_CELL'\n  };\n\nexport const OPERATORS = ['/', '+', '-', '*'];\nexport const NUMBERS = /^\\d*$/;","import React, { Component } from 'react';\n\nimport { NUMBERS, OPERATORS } from '../../constants/constants'\nimport InputRow from '../InputRow/InputRow';\n\nclass Calculator extends Component {\n    state = {\n        rows: {\n            'row-1': {\n                id: 'row-1',\n                elementsOrder: [],\n                result: 0,\n                isValid: true,\n            },\n        },\n        rowIds: ['row-1'],\n        elementsValues: {\n        },\n        caret: {\n            positionRow: null,\n        }\n    }\n\n    handleInputChange = (event, id, rowId) => {\n        const ctx = this;\n        const value = event.target.value;\n        if (this.inputValidation(value) === 'number') {\n            this.handleChangeNumber(value, id, rowId)\n            return;\n        }\n        if (this.inputValidation(value) === 'operator') {\n            async function sequence(context){    \n                await  ctx.createMathOperator(value.slice(-1), id, rowId);\n                ctx.createNumber(rowId);               \n                }\n                sequence(ctx)\n            return;\n        }\n    }\n\n    inputValidation = (value) => {\n        if (NUMBERS.test(value)) return 'number';\n        if (OPERATORS.includes(value) || OPERATORS.includes(value.slice(-1))) return 'operator';\n        if (value === 'Backspace') return 'Backspace';\n        if (value === 'Enter') return 'Enter';\n        return;\n    }\n\n    handleChangeNumber = (value, id, rowId) => {\n        this.setState({\n            elementsValues: {\n                ...this.state.elementsValues,\n                [id]: {\n                    ...this.state.elementsValues[id],\n                    value: value\n                }\n            }\n        }, )\n    }\n\n    handleKeyDown = (event, rowId) => {\n        const validatedInput = this.inputValidation(event.key)\n        switch (validatedInput) {\n            case 'number':\n                this.createNumber(rowId)\n                break;\n            case 'operator':\n                this.createMathOperator(event.key, null, rowId)\n                break;\n            case 'Backspace':\n                this.deleteElement()\n                break;\n            case 'Enter':\n                this.createRow();\n                break;\n            default:\n                break;\n        }\n    }\n\n    createRow() {\n        const newRowId = 'row-' + Date.now().toString();\n        const newRowIds = Array.from(this.state.rowIds);\n        newRowIds.push(newRowId);\n        const newRow = {\n            id: newRowId,\n            elementsOrder: [],\n            result: 0,\n            isValid: true,\n        }\n        this.setState({\n            rowIds: newRowIds,\n            rows: {\n                ...this.state.rows,\n                [newRowId]: newRow,\n            }\n        });\n    }\n\n    createNumber = (rowId) => {\n        const newElementsOrder = [...this.state.rows[rowId].elementsOrder];\n        if (newElementsOrder.length !== 0 && newElementsOrder[newElementsOrder.length-1].type === 'number') return;\n        const newElementId = 'num-' + Date.now().toString();\n\n        const newElement = {\n            id: newElementId,\n            type: 'number',\n            valueId: newElementId,\n            bound: false,\n        }\n        newElementsOrder.push(newElement);\n        this.setState({\n            rows: {\n                ...this.state.rows,\n                [rowId]: {\n                    ...this.state.rows[rowId],\n                    elementsOrder: newElementsOrder,\n                }\n            },\n            elementsValues: {\n                ...this.state.elementsValues,\n                [newElementId]: {\n                    value: '',\n                    tied: [{\n                        rowId: rowId,\n                        id: newElementId\n                    }],\n                }\n            },\n        }, )\n    }\n\n    createMathOperator = (operator, inputId, rowId) => {\n        const newElementsOrder = [...this.state.rows[rowId].elementsOrder];\n        if (newElementsOrder.length === 0 || newElementsOrder[newElementsOrder.length-1].type === 'operator') return;\n        const newElementId = 'opr-' + Date.now().toString();\n        const newElement = {\n            id: newElementId,\n            type: 'operator',\n            valueId: newElementId,\n        }\n        newElementsOrder.push(newElement);\n        this.setState({\n            ...this.state,\n            rows: {\n                ...this.state.rows,\n                [rowId]: {\n                    ...this.state.rows[rowId],\n                    elementsOrder: newElementsOrder,\n                }\n            },\n            elementsValues: {\n                ...this.state.elementsValues,\n                [newElementId]: {\n                    value: operator,\n                }\n            },\n        })\n    }\n\n\n    addCaret = (rowId, index) => {\n        this.setState({\n            caret: {\n                positionRow: rowId,\n            }\n        })\n    }\n\n    removeCaret = (rowId) => {\n        this.setState({\n            caret: {\n                positionRow: null,\n            }\n        })\n    }\n\n    deleteElement() {\n        // Delete from ElementsOrder\n        const caretpositionRow = this.state.caret.positionRow;\n        const newElementsOrder = [...this.state.rows[caretpositionRow].elementsOrder];\n        if (newElementsOrder.length === 0) return;\n        const deleted = newElementsOrder.pop();\n\n        if (deleted.type === 'operator') {\n            const newValues = {...this.state.elementsValues}\n            delete newValues[deleted.valueId]\n            this.setState({\n                elementsValues: newValues,\n                rows: {\n                    ...this.state.rows,\n                    [caretpositionRow]: {\n                        ...this.state.caretpositionRow,\n                        elementsOrder: newElementsOrder,\n                    }\n                }\n            })\n            return;\n        }\n\n        // Delete from ElementsValues\n        const newValues = {...this.state.elementsValues}\n        const newTied = newValues[deleted.valueId].tied.filter(el => {\n           return el.id !== deleted.id\n        })\n        newValues[deleted.valueId].tied = newTied\n\n        if ( newTied.length === 0 ) { \n            delete newValues[deleted.valueId]\n        }\n\n        // Unbound single element\n        if ( newTied.length === 1 ) {\n            const unbound = newTied[0];\n            const unboundElementsOrder = [...this.state.rows[unbound.rowId].elementsOrder]\n            unboundElementsOrder.map(el => {\n                if ( el.id === unbound.id ) return el.bound = false;\n            })\n            this.setState({\n                elementsValues: newValues,\n                rows: {\n                    ...this.state.rows,\n                    [unbound.rowId]: {\n                        ...this.state.rows[unbound.rowId],\n                        elementsOrder: unboundElementsOrder,\n                    },\n\n                    [caretpositionRow]: {\n                        ...this.state.caretpositionRow,\n                        elementsOrder: newElementsOrder,\n                    }\n                }\n            })\n            return;\n        }\n\n        this.setState({\n            elementsValues: newValues,\n            rows: {\n                ...this.state.rows,\n                [caretpositionRow]: {\n                    ...this.state.caretpositionRow,\n                    elementsOrder: newElementsOrder,\n                }\n            }\n        })\n    }\n\n    validateBeforeEval = (str, rowId) => {\n        if (str.length === 0) return true;\n        const elementsOrder = this.state.rows[rowId].elementsOrder\n        let counter = 0;\n        let prev = elementsOrder[0].type\n        for (let i = 0; i <= elementsOrder.length-1 ; i++) {\n            const current = elementsOrder[i];\n            if (prev === current.type) {\n                counter++;\n            } else {\n                prev = current.type;\n                counter = 0;\n            }\n            if (counter >= 2) return false;\n        }\n        return true;\n    }\n\n    calculation = (rowId) => {\n        let equation = '';\n        this.state.rows[rowId].elementsOrder.map(el => {\n            equation = equation + this.state.elementsValues[el.valueId].value\n        })\n        try {\n            if (!this.validateBeforeEval(equation, rowId)) {\n                throw '';\n            };\n            let result = eval(equation);\n            if (result === undefined) result = 0;\n            const newRows = Object.assign({}, this.state.rows)\n            newRows[rowId].result = result;\n            newRows[rowId].isValid = true;\n            this.setState({\n                rows: newRows\n            })\n        } catch(e) {\n            const newRows = Object.assign({}, this.state.rows)\n            newRows[rowId].result = 'error';\n            newRows[rowId].isValid = false;\n            this.setState({\n                rows: newRows \n            })\n        }\n    }\n\n    swapCells = (rowId, srcIndex, destIndex) => {\n        const newElementsOrder = [...this.state.rows[rowId].elementsOrder];\n        const srcEl = Object.assign({}, newElementsOrder[srcIndex]);\n        newElementsOrder[srcIndex] = newElementsOrder[destIndex];\n        newElementsOrder[destIndex] = srcEl;\n        this.setState({\n            ...this.state,\n            rows: {\n                ...this.state.rows,\n                [rowId]: {\n                    ...this.state.rows[rowId],\n                    elementsOrder: newElementsOrder,\n                }\n            },\n        }, )\n    }\n\n    swapCellsBetweenRows = (srcRow, destRow, srcIndex, destIndex) => {\n        const srcElementsOrder = [...this.state.rows[srcRow].elementsOrder];\n        const destElementsOrder = [...this.state.rows[destRow].elementsOrder];\n        const srcEl = Object.assign({}, srcElementsOrder[srcIndex]);\n        const destEl = Object.assign({}, destElementsOrder[destIndex]);\n        srcElementsOrder[srcIndex] = destEl;\n        destElementsOrder[destIndex] = srcEl;\n        \n        const newValues = Object.assign({},this.state.elementsValues);\n        newValues[srcEl.valueId].tied.map(el => {\n            if ( el.id === srcEl.id ) {\n                return el.rowId = destRow;\n            }\n        })\n        newValues[destEl.valueId].tied.map(el => {\n            if ( el.id === destEl.id ) {\n                return el.rowId = srcRow;\n            }\n        })\n\n        this.setState({\n            elementsValues: newValues,\n            rows: {\n                ...this.state.rows,\n                [srcRow]: {\n                    ...this.state.rows[srcRow],\n                    elementsOrder: srcElementsOrder,\n                },\n                [destRow]: {\n                    ...this.state.rows[destRow],\n                    elementsOrder: destElementsOrder,\n                }\n            },\n        })\n    }\n\n    cloneNumber = (srcRow, destRow, srcIndex) => {\n        const srcElementsOrder = [...this.state.rows[srcRow].elementsOrder];\n        const destElementsOrder = [...this.state.rows[destRow].elementsOrder];\n        const srcEl = srcElementsOrder[srcIndex];\n        const newElementId = 'num-' + Date.now().toString();\n        const cloneEl = {\n            id: newElementId,\n            type: 'number',\n            valueId: srcEl.valueId,\n            bound: true,\n        };\n        destElementsOrder.push(cloneEl);\n        const newValue = Object.assign({}, this.state.elementsValues[srcEl.valueId]); \n        newValue.tied.push({\n            rowId: destRow,\n            id: newElementId,\n        })\n        if (!srcEl.bound) srcEl.bound = true;\n        this.setState({\n            ...this.state,\n            elementsValues: {\n                ...this.state.elementsValues,\n                [srcEl.valueId]: newValue\n            },\n            rows: {\n                ...this.state.rows,\n                [srcRow]: {\n                    ...this.state.rows[srcRow],\n                    elementsOrder: srcElementsOrder,\n                },\n                [destRow]: {\n                    ...this.state.rows[destRow],\n                    elementsOrder: destElementsOrder,\n                }\n            },\n        }, )\n    }\n\n    render() { \n        const rows = this.state.rowIds.map(rowId => (\n            <InputRow\n                setRef={this.setTextInputRef}\n                caretPos={this.state.caret.positionRow}\n                addCaret={this.addCaret}\n                removeCaret={this.removeCaret}\n                key={rowId}\n                swapCells={this.swapCells}\n                swapCellsBetween={this.swapCellsBetweenRows}\n                cloneNumber={this.cloneNumber}\n                handleInput={this.handleInputChange}\n                keyDown={this.handleKeyDown}\n                rowId={rowId}\n                calc={this.calculation}\n                elementsValues={this.state.elementsValues}\n                result={this.state.rows[rowId].result}\n                isValid={this.state.rows[rowId].isValid}\n                elementsOrder={this.state.rows[rowId].elementsOrder}\n            />\n        ))\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport default Calculator;","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst blinker = keyframes`\n  50% {\n    opacity: 0;\n  }\n`\n\nconst StyledCaret = styled.div`\n  background-color: blue;\n  position: absolute;\n  left: 0;\n  opacity: 0.5;\n  height: 100%;\n  width: 3px;\n  overflow: hidden;\n  text-decoration: blink;\n  animation: ${blinker} 1s linear infinite;\n`;\n\nconst Caret = (props) => {\n    return (\n        <StyledCaret />\n    );\n}\n\nexport default Caret;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { ItemTypes } from '../../constants/constants'\nimport flow from 'lodash.flow'\n\nconst StyledNumber = styled.div`\n    height: 40px;\n    padding: 10px;\n    padding-top: 13px;\n    border-radius: 20%;\n    background-color: ${props => props.isOver ? 'lightgreen' : props.bound ? 'orange' : 'lightblue'};\n    opacity: ${props => props.isDragging ? 0 : 1};\n    display: inline-block;\n`;\n\nconst Input = styled.input`\n    width: 100%;\n    height: 80%;\n    font-size: 1.3em;\n    background-color: lightgray;\n    border: none;  \n`;\n\nconst cellSource = {\n    beginDrag(props) {\n        return {\n            sourceId: props.id,\n            sourceRowId: props.rowId,\n            sourceIndex: props.index,\n        };\n    },\n};\n\nconst cellTarget = {\n\tdrop(props, monitor, component) {\n\t\tif (!component) {\n\t\t\treturn null;\n        }\n        const destRow = props.rowId;\n        const sourceRow = monitor.getItem().sourceRowId;\n        const dragIndex = monitor.getItem().sourceIndex;\n        if (sourceRow === destRow) {\n            props.swapCells(destRow, dragIndex, props.index)\n            return;\n        } \n        props.swapCellsBetween(sourceRow, destRow, dragIndex, props.index)\n\t},\n}\n\n\nconst sourceCollect = (connect, monitor) => {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging(),\n    }\n}\n\nconst dropCollect = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver()\n    }\n}\n\nconst Cell = ({connectDragSource, connectDragPreview, connectDropTarget, isDragging, bound, isOver, ...props}) => {\n    return connectDragSource(connectDropTarget(\n        <div style={{height: '60px', width: '60px', padding: 0, margin: '0 10px', 'borderRadius': '20%'}}>\n            <StyledNumber\n                isOver={isOver}\n                isDragging={isDragging}\n                bound={bound}>\n                    <Input\n                        autoFocus\n                        onFocus={(e) => {e.stopPropagation()}}\n                        value={props.value}\n                        rowId={props.rowId}\n                        onKeyDown={e => e.stopPropagation()}\n                        onChange={(event) => { props.handleInput(event, props.valueId, props.rowId) }}\n                    />\n            </StyledNumber>\n        </div>\n    )\n               \n    );\n}\n\nexport default flow(DragSource(ItemTypes.NumberCell, cellSource, sourceCollect), DropTarget(ItemTypes.NumberCell, cellTarget, dropCollect))(Cell);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledOperator = styled.span`\n    height: 40px;\n    padding: 10px;\n    margin: 0 10px;\n    text-align: center; \n    font-size: 1.5em;\n`;\n\nconst Operator = (props) => {\n    return (\n        <StyledOperator>{props.operator}</StyledOperator>\n    );\n}\n \nexport default Operator;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSpan = styled.span`\n    width: auto;\n    font-size: 1.3em;\n    line-height: 40px;\n    padding: 10px;\n    border-radius: 20%;\n    text-align: center;\n    vertical-align: center;\n    background-color: ${props => props.isValid ? 'lightgreen' : 'red'};\n    display: inline-block;\n    margin: 0 10px;\n`;\n\nconst Result = (props) => {\n    return ( \n        <StyledSpan isValid={props.isValid} >\n            {props.result}\n        </StyledSpan>\n    )\n}\n \nexport default Result;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { DropTarget } from 'react-dnd'\nimport Caret from '../../components/Caret/Caret';\nimport NumberCell from '../../components/NumberCell/NumberCell';\nimport Operator from '../../components/Operator/Operator';\nimport { ItemTypes } from '../../constants/constants'\nimport Result from '../../components/Result/Result';\n\nconst Row = styled.div`\n    width: 100%;\n    background-color: ${props => props.isOver ? 'darkgrey' : '#f1f1f1'};\n    padding: 20px;\n    display: flex;\n    flex-direction: row;\n    margin-top: 10px;\n`;\n\nconst rowCollect = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver()\n    }\n}\n\nconst rowTarget = {\n    drop(props, monitor) {\n        const destRow = props.rowId;\n        const sourceRow = monitor.getItem().sourceRowId;\n        if (destRow === sourceRow) return;\n        if (monitor.didDrop()) return;\n        const dragIndex = monitor.getItem().sourceIndex;\n        \n        props.cloneNumber(sourceRow, destRow, dragIndex);\n\t},\n}\n\n\nclass InputRow extends Component {\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.elementsOrder !== this.props.elementsOrder ||\n            prevProps.elementsValues !== this.props.elementsValues)\n            this.props.calc(this.props.rowId)\n    }\n    myRef = React.createRef();\n\n    componentDidMount() {\n        this.myRef.current.focus()\n    }\n    \n    render() { \n        let mathRow = this.props.elementsOrder.map((elem, index) => {\n            switch (elem.type) {\n                case 'number':\n                    return <NumberCell\n                        handleInput={this.props.handleInput}\n                        inputId={elem.id}\n                        index={index}\n                        bound={elem.bound}\n                        key={elem.id}\n                        swapCells={this.props.swapCells}\n                        swapCellsBetween={this.props.swapCellsBetween}\n                        rowId={this.props.rowId}\n                        addCaret={this.props.addCaret}\n                        valueId={elem.valueId}\n                        value={this.props.elementsValues[elem.valueId].value} />\n                case 'operator':\n                    return <Operator\n                        index={index}\n                        operatorId={elem.id}\n                        key={elem.id}\n                        addCaret={this.props.addCaret}\n                        operator={this.props.elementsValues[elem.valueId].value} />\n                default:\n                    return null;\n            }\n        });\n        const {connectDropTarget, isOver} = this.props\n        const caret = this.props.caretPos === this.props.rowId ? <Caret /> : null; \n        return connectDropTarget(\n            <div>\n                <Row    \n                    ref={this.myRef}\n                    isOver={isOver}\n                    tabIndex=\"0\"\n                    onFocus={(ref) => this.props.addCaret(this.props.rowId)}\n                    onBlur={() => this.props.removeCaret(this.props.rowId)}\n                    onKeyDown={(event, id) => this.props.keyDown(event, this.props.rowId)}\n                    rowId={this.props.rowId}>\n                    {mathRow}\n                    <div style={{position: 'relative'}}>\n                        {caret}\n                        <Operator operator={'='} />\n                        <Result \n                            isValid={this.props.isValid}\n                            result={this.props.result}\n                        />\n                    </div>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default DropTarget(ItemTypes.NumberCell, rowTarget, rowCollect)(InputRow);"],"sourceRoot":""}